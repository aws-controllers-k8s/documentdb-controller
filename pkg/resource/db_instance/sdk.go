// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package db_instance

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/docdb"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/docdb/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/documentdb-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.DBInstance{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeDBInstancesOutput
	resp, err = rm.sdkapi.DescribeDBInstances(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeDBInstances", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "DBInstanceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.DBInstances {
		if elem.AutoMinorVersionUpgrade != nil {
			ko.Spec.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			ko.Spec.AutoMinorVersionUpgrade = nil
		}
		if elem.AvailabilityZone != nil {
			ko.Spec.AvailabilityZone = elem.AvailabilityZone
		} else {
			ko.Spec.AvailabilityZone = nil
		}
		if elem.BackupRetentionPeriod != nil {
			backupRetentionPeriodCopy := int64(*elem.BackupRetentionPeriod)
			ko.Status.BackupRetentionPeriod = &backupRetentionPeriodCopy
		} else {
			ko.Status.BackupRetentionPeriod = nil
		}
		if elem.CACertificateIdentifier != nil {
			ko.Spec.CACertificateIdentifier = elem.CACertificateIdentifier
		} else {
			ko.Spec.CACertificateIdentifier = nil
		}
		if elem.CertificateDetails != nil {
			f4 := &svcapitypes.CertificateDetails{}
			if elem.CertificateDetails.CAIdentifier != nil {
				f4.CAIdentifier = elem.CertificateDetails.CAIdentifier
			}
			if elem.CertificateDetails.ValidTill != nil {
				f4.ValidTill = &metav1.Time{*elem.CertificateDetails.ValidTill}
			}
			ko.Status.CertificateDetails = f4
		} else {
			ko.Status.CertificateDetails = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			ko.Spec.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			ko.Spec.CopyTagsToSnapshot = nil
		}
		if elem.DBClusterIdentifier != nil {
			ko.Spec.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			ko.Spec.DBClusterIdentifier = nil
		}
		if elem.DBInstanceArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.DBInstanceArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.DBInstanceClass != nil {
			ko.Spec.DBInstanceClass = elem.DBInstanceClass
		} else {
			ko.Spec.DBInstanceClass = nil
		}
		if elem.DBInstanceIdentifier != nil {
			ko.Spec.DBInstanceIdentifier = elem.DBInstanceIdentifier
		} else {
			ko.Spec.DBInstanceIdentifier = nil
		}
		if elem.DBInstanceStatus != nil {
			ko.Status.DBInstanceStatus = elem.DBInstanceStatus
		} else {
			ko.Status.DBInstanceStatus = nil
		}
		if elem.DBSubnetGroup != nil {
			f11 := &svcapitypes.DBSubnetGroup_SDK{}
			if elem.DBSubnetGroup.DBSubnetGroupArn != nil {
				f11.DBSubnetGroupARN = elem.DBSubnetGroup.DBSubnetGroupArn
			}
			if elem.DBSubnetGroup.DBSubnetGroupDescription != nil {
				f11.DBSubnetGroupDescription = elem.DBSubnetGroup.DBSubnetGroupDescription
			}
			if elem.DBSubnetGroup.DBSubnetGroupName != nil {
				f11.DBSubnetGroupName = elem.DBSubnetGroup.DBSubnetGroupName
			}
			if elem.DBSubnetGroup.SubnetGroupStatus != nil {
				f11.SubnetGroupStatus = elem.DBSubnetGroup.SubnetGroupStatus
			}
			if elem.DBSubnetGroup.Subnets != nil {
				f11f4 := []*svcapitypes.Subnet{}
				for _, f11f4iter := range elem.DBSubnetGroup.Subnets {
					f11f4elem := &svcapitypes.Subnet{}
					if f11f4iter.SubnetAvailabilityZone != nil {
						f11f4elemf0 := &svcapitypes.AvailabilityZone{}
						if f11f4iter.SubnetAvailabilityZone.Name != nil {
							f11f4elemf0.Name = f11f4iter.SubnetAvailabilityZone.Name
						}
						f11f4elem.SubnetAvailabilityZone = f11f4elemf0
					}
					if f11f4iter.SubnetIdentifier != nil {
						f11f4elem.SubnetIdentifier = f11f4iter.SubnetIdentifier
					}
					if f11f4iter.SubnetStatus != nil {
						f11f4elem.SubnetStatus = f11f4iter.SubnetStatus
					}
					f11f4 = append(f11f4, f11f4elem)
				}
				f11.Subnets = f11f4
			}
			if elem.DBSubnetGroup.VpcId != nil {
				f11.VPCID = elem.DBSubnetGroup.VpcId
			}
			ko.Status.DBSubnetGroup = f11
		} else {
			ko.Status.DBSubnetGroup = nil
		}
		if elem.DbiResourceId != nil {
			ko.Status.DBIResourceID = elem.DbiResourceId
		} else {
			ko.Status.DBIResourceID = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			ko.Status.EnabledCloudwatchLogsExports = aws.StringSlice(elem.EnabledCloudwatchLogsExports)
		} else {
			ko.Status.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			f14 := &svcapitypes.Endpoint{}
			if elem.Endpoint.Address != nil {
				f14.Address = elem.Endpoint.Address
			}
			if elem.Endpoint.HostedZoneId != nil {
				f14.HostedZoneID = elem.Endpoint.HostedZoneId
			}
			if elem.Endpoint.Port != nil {
				portCopy := int64(*elem.Endpoint.Port)
				f14.Port = &portCopy
			}
			ko.Status.Endpoint = f14
		} else {
			ko.Status.Endpoint = nil
		}
		if elem.Engine != nil {
			ko.Spec.Engine = elem.Engine
		} else {
			ko.Spec.Engine = nil
		}
		if elem.EngineVersion != nil {
			ko.Status.EngineVersion = elem.EngineVersion
		} else {
			ko.Status.EngineVersion = nil
		}
		if elem.InstanceCreateTime != nil {
			ko.Status.InstanceCreateTime = &metav1.Time{*elem.InstanceCreateTime}
		} else {
			ko.Status.InstanceCreateTime = nil
		}
		if elem.KmsKeyId != nil {
			ko.Status.KMSKeyID = elem.KmsKeyId
		} else {
			ko.Status.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			ko.Status.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			ko.Status.LatestRestorableTime = nil
		}
		if elem.PendingModifiedValues != nil {
			f20 := &svcapitypes.PendingModifiedValues{}
			if elem.PendingModifiedValues.AllocatedStorage != nil {
				allocatedStorageCopy := int64(*elem.PendingModifiedValues.AllocatedStorage)
				f20.AllocatedStorage = &allocatedStorageCopy
			}
			if elem.PendingModifiedValues.BackupRetentionPeriod != nil {
				backupRetentionPeriodCopy := int64(*elem.PendingModifiedValues.BackupRetentionPeriod)
				f20.BackupRetentionPeriod = &backupRetentionPeriodCopy
			}
			if elem.PendingModifiedValues.CACertificateIdentifier != nil {
				f20.CACertificateIdentifier = elem.PendingModifiedValues.CACertificateIdentifier
			}
			if elem.PendingModifiedValues.DBInstanceClass != nil {
				f20.DBInstanceClass = elem.PendingModifiedValues.DBInstanceClass
			}
			if elem.PendingModifiedValues.DBInstanceIdentifier != nil {
				f20.DBInstanceIdentifier = elem.PendingModifiedValues.DBInstanceIdentifier
			}
			if elem.PendingModifiedValues.DBSubnetGroupName != nil {
				f20.DBSubnetGroupName = elem.PendingModifiedValues.DBSubnetGroupName
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f20.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.Iops != nil {
				iopsCopy := int64(*elem.PendingModifiedValues.Iops)
				f20.IOPS = &iopsCopy
			}
			if elem.PendingModifiedValues.LicenseModel != nil {
				f20.LicenseModel = elem.PendingModifiedValues.LicenseModel
			}
			if elem.PendingModifiedValues.MasterUserPassword != nil {
				f20.MasterUserPassword = elem.PendingModifiedValues.MasterUserPassword
			}
			if elem.PendingModifiedValues.MultiAZ != nil {
				f20.MultiAZ = elem.PendingModifiedValues.MultiAZ
			}
			if elem.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
				f20f11 := &svcapitypes.PendingCloudwatchLogsExports{}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
					f20f11.LogTypesToDisable = aws.StringSlice(elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable)
				}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
					f20f11.LogTypesToEnable = aws.StringSlice(elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable)
				}
				f20.PendingCloudwatchLogsExports = f20f11
			}
			if elem.PendingModifiedValues.Port != nil {
				portCopy := int64(*elem.PendingModifiedValues.Port)
				f20.Port = &portCopy
			}
			if elem.PendingModifiedValues.StorageType != nil {
				f20.StorageType = elem.PendingModifiedValues.StorageType
			}
			ko.Status.PendingModifiedValues = f20
		} else {
			ko.Status.PendingModifiedValues = nil
		}
		if elem.PerformanceInsightsEnabled != nil {
			ko.Spec.PerformanceInsightsEnabled = elem.PerformanceInsightsEnabled
		} else {
			ko.Spec.PerformanceInsightsEnabled = nil
		}
		if elem.PerformanceInsightsKMSKeyId != nil {
			ko.Spec.PerformanceInsightsKMSKeyID = elem.PerformanceInsightsKMSKeyId
		} else {
			ko.Spec.PerformanceInsightsKMSKeyID = nil
		}
		if elem.PreferredBackupWindow != nil {
			ko.Status.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			ko.Status.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			ko.Spec.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			ko.Spec.PreferredMaintenanceWindow = nil
		}
		if elem.PromotionTier != nil {
			promotionTierCopy := int64(*elem.PromotionTier)
			ko.Spec.PromotionTier = &promotionTierCopy
		} else {
			ko.Spec.PromotionTier = nil
		}
		if elem.PubliclyAccessible != nil {
			ko.Status.PubliclyAccessible = elem.PubliclyAccessible
		} else {
			ko.Status.PubliclyAccessible = nil
		}
		if elem.StatusInfos != nil {
			f27 := []*svcapitypes.DBInstanceStatusInfo{}
			for _, f27iter := range elem.StatusInfos {
				f27elem := &svcapitypes.DBInstanceStatusInfo{}
				if f27iter.Message != nil {
					f27elem.Message = f27iter.Message
				}
				if f27iter.Normal != nil {
					f27elem.Normal = f27iter.Normal
				}
				if f27iter.Status != nil {
					f27elem.Status = f27iter.Status
				}
				if f27iter.StatusType != nil {
					f27elem.StatusType = f27iter.StatusType
				}
				f27 = append(f27, f27elem)
			}
			ko.Status.StatusInfos = f27
		} else {
			ko.Status.StatusInfos = nil
		}
		if elem.StorageEncrypted != nil {
			ko.Status.StorageEncrypted = elem.StorageEncrypted
		} else {
			ko.Status.StorageEncrypted = nil
		}
		if elem.VpcSecurityGroups != nil {
			f29 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f29iter := range elem.VpcSecurityGroups {
				f29elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f29iter.Status != nil {
					f29elem.Status = f29iter.Status
				}
				if f29iter.VpcSecurityGroupId != nil {
					f29elem.VPCSecurityGroupID = f29iter.VpcSecurityGroupId
				}
				f29 = append(f29, f29elem)
			}
			ko.Status.VPCSecurityGroups = f29
		} else {
			ko.Status.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	if ko.Status.ACKResourceMetadata != nil && ko.Status.ACKResourceMetadata.ARN != nil {
		resourceARN := (*string)(ko.Status.ACKResourceMetadata.ARN)
		tags, err := rm.getTags(ctx, *resourceARN)
		if err != nil {
			return nil, err
		}
		ko.Spec.Tags = tags
	}
	if !instanceAvailable(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeDBInstancesInput, error) {
	res := &svcsdk.DescribeDBInstancesInput{}

	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.DBInstanceIdentifier = r.ko.Spec.DBInstanceIdentifier
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDBInstanceOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDBInstance(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDBInstance", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		ko.Spec.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		ko.Spec.AvailabilityZone = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		backupRetentionPeriodCopy := int64(*resp.DBInstance.BackupRetentionPeriod)
		ko.Status.BackupRetentionPeriod = &backupRetentionPeriodCopy
	} else {
		ko.Status.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		ko.Spec.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		ko.Spec.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CertificateDetails != nil {
		f4 := &svcapitypes.CertificateDetails{}
		if resp.DBInstance.CertificateDetails.CAIdentifier != nil {
			f4.CAIdentifier = resp.DBInstance.CertificateDetails.CAIdentifier
		}
		if resp.DBInstance.CertificateDetails.ValidTill != nil {
			f4.ValidTill = &metav1.Time{*resp.DBInstance.CertificateDetails.ValidTill}
		}
		ko.Status.CertificateDetails = f4
	} else {
		ko.Status.CertificateDetails = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		ko.Spec.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		ko.Spec.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		ko.Spec.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		ko.Spec.DBClusterIdentifier = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBInstance.DBInstanceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBInstance.DBInstanceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBInstance.DBInstanceClass != nil {
		ko.Spec.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		ko.Spec.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		ko.Spec.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		ko.Spec.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		ko.Status.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		ko.Status.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f11 := &svcapitypes.DBSubnetGroup_SDK{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f11.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f11.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f11.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f11.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f11f4 := []*svcapitypes.Subnet{}
			for _, f11f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f11f4elem := &svcapitypes.Subnet{}
				if f11f4iter.SubnetAvailabilityZone != nil {
					f11f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f11f4iter.SubnetAvailabilityZone.Name != nil {
						f11f4elemf0.Name = f11f4iter.SubnetAvailabilityZone.Name
					}
					f11f4elem.SubnetAvailabilityZone = f11f4elemf0
				}
				if f11f4iter.SubnetIdentifier != nil {
					f11f4elem.SubnetIdentifier = f11f4iter.SubnetIdentifier
				}
				if f11f4iter.SubnetStatus != nil {
					f11f4elem.SubnetStatus = f11f4iter.SubnetStatus
				}
				f11f4 = append(f11f4, f11f4elem)
			}
			f11.Subnets = f11f4
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f11.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		ko.Status.DBSubnetGroup = f11
	} else {
		ko.Status.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		ko.Status.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		ko.Status.DBIResourceID = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		ko.Status.EnabledCloudwatchLogsExports = aws.StringSlice(resp.DBInstance.EnabledCloudwatchLogsExports)
	} else {
		ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f14 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f14.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f14.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			portCopy := int64(*resp.DBInstance.Endpoint.Port)
			f14.Port = &portCopy
		}
		ko.Status.Endpoint = f14
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		ko.Spec.Engine = resp.DBInstance.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		ko.Status.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		ko.Status.EngineVersion = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		ko.Status.InstanceCreateTime = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		ko.Status.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		ko.Status.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		ko.Status.LatestRestorableTime = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f20 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			allocatedStorageCopy := int64(*resp.DBInstance.PendingModifiedValues.AllocatedStorage)
			f20.AllocatedStorage = &allocatedStorageCopy
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			backupRetentionPeriodCopy := int64(*resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod)
			f20.BackupRetentionPeriod = &backupRetentionPeriodCopy
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f20.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f20.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f20.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f20.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f20.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			iopsCopy := int64(*resp.DBInstance.PendingModifiedValues.Iops)
			f20.IOPS = &iopsCopy
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f20.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f20.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f20.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f20f11 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f20f11.LogTypesToDisable = aws.StringSlice(resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable)
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f20f11.LogTypesToEnable = aws.StringSlice(resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable)
			}
			f20.PendingCloudwatchLogsExports = f20f11
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			portCopy := int64(*resp.DBInstance.PendingModifiedValues.Port)
			f20.Port = &portCopy
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f20.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		ko.Status.PendingModifiedValues = f20
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		ko.Spec.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		ko.Spec.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		ko.Spec.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		ko.Spec.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		ko.Status.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		ko.Status.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		ko.Spec.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		promotionTierCopy := int64(*resp.DBInstance.PromotionTier)
		ko.Spec.PromotionTier = &promotionTierCopy
	} else {
		ko.Spec.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		ko.Status.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		ko.Status.PubliclyAccessible = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f27 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f27iter := range resp.DBInstance.StatusInfos {
			f27elem := &svcapitypes.DBInstanceStatusInfo{}
			if f27iter.Message != nil {
				f27elem.Message = f27iter.Message
			}
			if f27iter.Normal != nil {
				f27elem.Normal = f27iter.Normal
			}
			if f27iter.Status != nil {
				f27elem.Status = f27iter.Status
			}
			if f27iter.StatusType != nil {
				f27elem.StatusType = f27iter.StatusType
			}
			f27 = append(f27, f27elem)
		}
		ko.Status.StatusInfos = f27
	} else {
		ko.Status.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		ko.Status.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		ko.Status.StorageEncrypted = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f29 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f29iter := range resp.DBInstance.VpcSecurityGroups {
			f29elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f29iter.Status != nil {
				f29elem.Status = f29iter.Status
			}
			if f29iter.VpcSecurityGroupId != nil {
				f29elem.VPCSecurityGroupID = f29iter.VpcSecurityGroupId
			}
			f29 = append(f29, f29elem)
		}
		ko.Status.VPCSecurityGroups = f29
	} else {
		ko.Status.VPCSecurityGroups = nil
	}

	rm.setStatusDefaults(ko)
	// We expect the DB instance to be in 'creating' status since we just
	// issued the call to create it, but I suppose it doesn't hurt to check
	// here.
	if instanceCreating(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
		return &resource{ko}, nil
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDBInstanceInput, error) {
	res := &svcsdk.CreateDBInstanceInput{}

	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.AutoMinorVersionUpgrade = r.ko.Spec.AutoMinorVersionUpgrade
	}
	if r.ko.Spec.AvailabilityZone != nil {
		res.AvailabilityZone = r.ko.Spec.AvailabilityZone
	}
	if r.ko.Spec.CACertificateIdentifier != nil {
		res.CACertificateIdentifier = r.ko.Spec.CACertificateIdentifier
	}
	if r.ko.Spec.CopyTagsToSnapshot != nil {
		res.CopyTagsToSnapshot = r.ko.Spec.CopyTagsToSnapshot
	}
	if r.ko.Spec.DBClusterIdentifier != nil {
		res.DBClusterIdentifier = r.ko.Spec.DBClusterIdentifier
	}
	if r.ko.Spec.DBInstanceClass != nil {
		res.DBInstanceClass = r.ko.Spec.DBInstanceClass
	}
	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.DBInstanceIdentifier = r.ko.Spec.DBInstanceIdentifier
	}
	if r.ko.Spec.PerformanceInsightsEnabled != nil {
		res.EnablePerformanceInsights = r.ko.Spec.PerformanceInsightsEnabled
	}
	if r.ko.Spec.Engine != nil {
		res.Engine = r.ko.Spec.Engine
	}
	if r.ko.Spec.PerformanceInsightsKMSKeyID != nil {
		res.PerformanceInsightsKMSKeyId = r.ko.Spec.PerformanceInsightsKMSKeyID
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.PreferredMaintenanceWindow = r.ko.Spec.PreferredMaintenanceWindow
	}
	if r.ko.Spec.PromotionTier != nil {
		promotionTierCopy0 := *r.ko.Spec.PromotionTier
		if promotionTierCopy0 > math.MaxInt32 || promotionTierCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field PromotionTier is of type int32")
		}
		promotionTierCopy := int32(promotionTierCopy0)
		res.PromotionTier = &promotionTierCopy
	}
	if r.ko.Spec.Tags != nil {
		f12 := []svcsdktypes.Tag{}
		for _, f12iter := range r.ko.Spec.Tags {
			f12elem := &svcsdktypes.Tag{}
			if f12iter.Key != nil {
				f12elem.Key = f12iter.Key
			}
			if f12iter.Value != nil {
				f12elem.Value = f12iter.Value
			}
			f12 = append(f12, *f12elem)
		}
		res.Tags = f12
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if instanceDeleting(latest) {
		msg := "DB instance is currently being deleted"
		ackcondition.SetSynced(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitWhileDeleting
	}
	if instanceCreating(latest) {
		msg := "DB instance is currently being created"
		ackcondition.SetSynced(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitUntilCanModify(latest)
	}
	if instanceHasTerminalStatus(latest) {
		msg := "DB instance is in '" + *latest.ko.Status.DBInstanceStatus + "' status"
		ackcondition.SetTerminal(desired, corev1.ConditionTrue, &msg, nil)
		ackcondition.SetSynced(desired, corev1.ConditionTrue, nil, nil)
		return desired, nil
	}
	if !instanceAvailable(latest) {
		msg := "DB instance cannot be modifed while in '" + *latest.ko.Status.DBInstanceStatus + "' status"
		ackcondition.SetSynced(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitUntilCanModify(latest)
	}
	if delta.DifferentAt("Spec.Tags") {
		if err = rm.syncTags(ctx, desired, latest); err != nil {
			return nil, err
		}
	} else if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	if !delta.DifferentAt("Spec.CACertificateIdentifier") {
		input.CACertificateIdentifier = nil
	}

	var resp *svcsdk.ModifyDBInstanceOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyDBInstance(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyDBInstance", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		ko.Spec.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		ko.Spec.AvailabilityZone = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		backupRetentionPeriodCopy := int64(*resp.DBInstance.BackupRetentionPeriod)
		ko.Status.BackupRetentionPeriod = &backupRetentionPeriodCopy
	} else {
		ko.Status.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		ko.Spec.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		ko.Spec.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CertificateDetails != nil {
		f4 := &svcapitypes.CertificateDetails{}
		if resp.DBInstance.CertificateDetails.CAIdentifier != nil {
			f4.CAIdentifier = resp.DBInstance.CertificateDetails.CAIdentifier
		}
		if resp.DBInstance.CertificateDetails.ValidTill != nil {
			f4.ValidTill = &metav1.Time{*resp.DBInstance.CertificateDetails.ValidTill}
		}
		ko.Status.CertificateDetails = f4
	} else {
		ko.Status.CertificateDetails = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		ko.Spec.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		ko.Spec.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		ko.Spec.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		ko.Spec.DBClusterIdentifier = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBInstance.DBInstanceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBInstance.DBInstanceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBInstance.DBInstanceClass != nil {
		ko.Spec.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		ko.Spec.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		ko.Spec.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		ko.Spec.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		ko.Status.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		ko.Status.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f11 := &svcapitypes.DBSubnetGroup_SDK{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f11.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f11.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f11.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f11.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f11f4 := []*svcapitypes.Subnet{}
			for _, f11f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f11f4elem := &svcapitypes.Subnet{}
				if f11f4iter.SubnetAvailabilityZone != nil {
					f11f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f11f4iter.SubnetAvailabilityZone.Name != nil {
						f11f4elemf0.Name = f11f4iter.SubnetAvailabilityZone.Name
					}
					f11f4elem.SubnetAvailabilityZone = f11f4elemf0
				}
				if f11f4iter.SubnetIdentifier != nil {
					f11f4elem.SubnetIdentifier = f11f4iter.SubnetIdentifier
				}
				if f11f4iter.SubnetStatus != nil {
					f11f4elem.SubnetStatus = f11f4iter.SubnetStatus
				}
				f11f4 = append(f11f4, f11f4elem)
			}
			f11.Subnets = f11f4
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f11.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		ko.Status.DBSubnetGroup = f11
	} else {
		ko.Status.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		ko.Status.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		ko.Status.DBIResourceID = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		ko.Status.EnabledCloudwatchLogsExports = aws.StringSlice(resp.DBInstance.EnabledCloudwatchLogsExports)
	} else {
		ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f14 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f14.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f14.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			portCopy := int64(*resp.DBInstance.Endpoint.Port)
			f14.Port = &portCopy
		}
		ko.Status.Endpoint = f14
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		ko.Spec.Engine = resp.DBInstance.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		ko.Status.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		ko.Status.EngineVersion = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		ko.Status.InstanceCreateTime = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		ko.Status.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		ko.Status.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		ko.Status.LatestRestorableTime = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f20 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			allocatedStorageCopy := int64(*resp.DBInstance.PendingModifiedValues.AllocatedStorage)
			f20.AllocatedStorage = &allocatedStorageCopy
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			backupRetentionPeriodCopy := int64(*resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod)
			f20.BackupRetentionPeriod = &backupRetentionPeriodCopy
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f20.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f20.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f20.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f20.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f20.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			iopsCopy := int64(*resp.DBInstance.PendingModifiedValues.Iops)
			f20.IOPS = &iopsCopy
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f20.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f20.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f20.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f20f11 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f20f11.LogTypesToDisable = aws.StringSlice(resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable)
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f20f11.LogTypesToEnable = aws.StringSlice(resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable)
			}
			f20.PendingCloudwatchLogsExports = f20f11
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			portCopy := int64(*resp.DBInstance.PendingModifiedValues.Port)
			f20.Port = &portCopy
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f20.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		ko.Status.PendingModifiedValues = f20
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		ko.Spec.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		ko.Spec.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		ko.Spec.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		ko.Spec.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		ko.Status.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		ko.Status.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		ko.Spec.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		promotionTierCopy := int64(*resp.DBInstance.PromotionTier)
		ko.Spec.PromotionTier = &promotionTierCopy
	} else {
		ko.Spec.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		ko.Status.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		ko.Status.PubliclyAccessible = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f27 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f27iter := range resp.DBInstance.StatusInfos {
			f27elem := &svcapitypes.DBInstanceStatusInfo{}
			if f27iter.Message != nil {
				f27elem.Message = f27iter.Message
			}
			if f27iter.Normal != nil {
				f27elem.Normal = f27iter.Normal
			}
			if f27iter.Status != nil {
				f27elem.Status = f27iter.Status
			}
			if f27iter.StatusType != nil {
				f27elem.StatusType = f27iter.StatusType
			}
			f27 = append(f27, f27elem)
		}
		ko.Status.StatusInfos = f27
	} else {
		ko.Status.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		ko.Status.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		ko.Status.StorageEncrypted = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f29 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f29iter := range resp.DBInstance.VpcSecurityGroups {
			f29elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f29iter.Status != nil {
				f29elem.Status = f29iter.Status
			}
			if f29iter.VpcSecurityGroupId != nil {
				f29elem.VPCSecurityGroupID = f29iter.VpcSecurityGroupId
			}
			f29 = append(f29, f29elem)
		}
		ko.Status.VPCSecurityGroups = f29
	} else {
		ko.Status.VPCSecurityGroups = nil
	}

	rm.setStatusDefaults(ko)
	// When ModifyDBInstance API is successful, it asynchronously
	// updates the DBInstanceStatus. Requeue to find the current
	// DBInstance status and set Synced condition accordingly
	if err == nil {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyDBInstanceInput, error) {
	res := &svcsdk.ModifyDBInstanceInput{}

	res.ApplyImmediately = aws.Bool(true)
	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.AutoMinorVersionUpgrade = r.ko.Spec.AutoMinorVersionUpgrade
	}
	if r.ko.Spec.CACertificateIdentifier != nil {
		res.CACertificateIdentifier = r.ko.Spec.CACertificateIdentifier
	}
	if r.ko.Spec.CopyTagsToSnapshot != nil {
		res.CopyTagsToSnapshot = r.ko.Spec.CopyTagsToSnapshot
	}
	if r.ko.Spec.DBInstanceClass != nil {
		res.DBInstanceClass = r.ko.Spec.DBInstanceClass
	}
	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.DBInstanceIdentifier = r.ko.Spec.DBInstanceIdentifier
	}
	if r.ko.Spec.PerformanceInsightsEnabled != nil {
		res.EnablePerformanceInsights = r.ko.Spec.PerformanceInsightsEnabled
	}
	if r.ko.Spec.PerformanceInsightsKMSKeyID != nil {
		res.PerformanceInsightsKMSKeyId = r.ko.Spec.PerformanceInsightsKMSKeyID
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.PreferredMaintenanceWindow = r.ko.Spec.PreferredMaintenanceWindow
	}
	if r.ko.Spec.PromotionTier != nil {
		promotionTierCopy0 := *r.ko.Spec.PromotionTier
		if promotionTierCopy0 > math.MaxInt32 || promotionTierCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field PromotionTier is of type int32")
		}
		promotionTierCopy := int32(promotionTierCopy0)
		res.PromotionTier = &promotionTierCopy
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if instanceDeleting(r) {
		return r, requeueWaitWhileDeleting
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDBInstanceOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDBInstance(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDBInstance", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDBInstanceInput, error) {
	res := &svcsdk.DeleteDBInstanceInput{}

	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.DBInstanceIdentifier = r.ko.Spec.DBInstanceIdentifier
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.DBInstance,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameter",
		"InvalidParameterValue",
		"InvalidParameterCombination":
		return true
	default:
		return false
	}
}
